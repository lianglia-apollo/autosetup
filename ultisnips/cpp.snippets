priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)" b
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet endl "std::endl"
std::endl;$0
endsnippet

snippet cstr "const std::string&" w
const std::string& $0
endsnippet

snippet sstr "std::string" w
std::string$0
endsnippet

snippet istr "#include <string>"
#include <string>
endsnippet

snippet ivec "#include <vector>"
#include <vector>
endsnippet

snippet iutil "#include <utility>"
#include <utility>
endsnippet

snippet ialgo "#include <algorithm>"
#include <algorithm>
endsnippet

snippet imem "#include <memory>"
#include <memory>
endsnippet

snippet iarr "#include <array>"
#include <array>
endsnippet

snippet iuset "#include <unordered_set>"
#include <unordered_set>
endsnippet

snippet imath "#include <cmath>"
#include <cmath>
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet GF "define gflags"
DECLARE_$1($2);
DEFINE_$1($2, "${3:default value}", "${4:help}");
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet end_with "check string end with"
bool ends_with(const std::string& original, const std::string& pattern) {
	return original.length() >= pattern.length() &&
			original.substr(original.length() - pattern.length()) == pattern;
}
$0
endsnippet

snippet start_with "check string start with"
bool starts_with(const std::string& original, const std::string& pattern) {
	return original.length() >= pattern.length() &&
			original.substr(0, pattern.length()) == pattern;
}
$0
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
public:
	$1();
	virtual ~$1();

private:
	$3
};

#endif /* $2 */
endsnippet

snippet gtestf "gtest test testsuite"
#include "gtest/gtest.h"
#define private public

class $1 : public ::testing::Test {
public:
	virtual void SetUp() {
	}
	virtual void TearDown() {
	}
	virtual ~$1() {
	}
};

TEST_F($1, ${2:case1}) {
}

int main(int argc, char* argv[]) {
	::testing::InitGoogleTest(&argc, argv);
	::google::ParseCommandLineFlags(&argc, &argv, true);
	return RUN_ALL_TESTS();
}

endsnippet

# vim:ft=snippets:
